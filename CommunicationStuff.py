import numpy as np
        ###Tables generator
        ###sheizze man
        ###Mars parameters
mu = 4.282837e13   
R_mars = 3390*1000 #km
def TOrbital(r_p, r_a):
    #calculates orbital period of satellite, insert in km
    #returns in seconds
    r_p +=R_mars
    r_a +=R_mars
    r_p *=1000
    r_a *=1000
    
    a = (r_p+r_a)/2
    return 2*np.pi* np.sqrt(a**3/mu)
def tlt(x):
    #Returns the 10*log10(x)
    return 10*np.log10(x)
def ReqEB_N0(params, R): #Required energy per bit to noise power spectral density
    P, L_l, G_t, L_pr, L_s, L_a, G_r, T_s = params
    EBN0 = tlt(P) + L_l + G_t + L_pr + L_s + L_a + G_r + 228.6 - tlt(T_s) - tlt(R)
    return EBN0
P = 60.2 #W
f_c = 400e6 #Mhz
S = 500e3 #m, from MRO



Link_paramts = [P, #Power generated by transmitted #W
          L_l, #Transmitter-Antenna path loss #dB
          G_t, #Transmitter Antenna gain #dB
          L_pr, #Antenna pointing loss  #dB
          L_s, #Receptin feeder loss #dB
          L_a, #Transmitter path losses #dB
          G_r, #Receiver antenna gain #dB
          T_s] #System noise temperature #K
a_sat = 400000
DegToRad = np.pi/180
e_min = 5*DegToRad #deg, from SMAD, minimum elevation for contact
rho = np.arcsin(R_mars/(R_mars + a_sat)) #rad, angular radius of Mars seen by sat
n_max = np.arcsin(np.sin(rho) * np.cos(e_min)) #max Mars nadir angle
lam_max = 90*DegToRad - e_min - n_max #maximum nadir angle, rad
D_max = R_mars * np.sin(lam_max)/np.sin(n_max) #Max range
